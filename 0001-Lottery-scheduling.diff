diff --git a/Makefile b/Makefile
index 09d790c..f888631 100644
--- a/Makefile
+++ b/Makefile
@@ -27,6 +27,7 @@ OBJS = \
 	uart.o\
 	vectors.o\
 	vm.o\
+	rand.o\
 
 # Cross-compiling (e.g., on Mac OS X)
 # TOOLPREFIX = i386-jos-elf
@@ -181,6 +182,7 @@ UPROGS=\
 	_usertests\
 	_wc\
 	_zombie\
+	_schedulingtest\
 
 fs.img: mkfs README $(UPROGS)
 	./mkfs fs.img README $(UPROGS)
@@ -248,7 +250,7 @@ qemu-nox-gdb: fs.img xv6.img .gdbinit
 # check in that version.
 
 EXTRA=\
-	mkfs.c ulib.c user.h cat.c echo.c forktest.c grep.c kill.c\
+	mkfs.c ulib.c user.h cat.c echo.c forktest.c schedulingtest.c grep.c kill.c\
 	ln.c ls.c mkdir.c rm.c stressfs.c usertests.c wc.c zombie.c\
 	printf.c umalloc.c\
 	README dot-bochsrc *.pl toc.* runoff runoff1 runoff.list\
diff --git a/defs.h b/defs.h
index 82fb982..611a6d1 100644
--- a/defs.h
+++ b/defs.h
@@ -105,7 +105,7 @@ int             pipewrite(struct pipe*, char*, int);
 // proc.c
 int             cpuid(void);
 void            exit(void);
-int             fork(void);
+int             fork(int);
 int             growproc(int);
 int             kill(int);
 struct cpu*     mycpu(void);
diff --git a/forktest.c b/forktest.c
index 8bc984d..7818e40 100644
--- a/forktest.c
+++ b/forktest.c
@@ -4,6 +4,7 @@
 #include "types.h"
 #include "stat.h"
 #include "user.h"
+#include "param.h"
 
 #define N  1000
 
@@ -21,7 +22,7 @@ forktest(void)
   printf(1, "fork test\n");
 
   for(n=0; n<N; n++){
-    pid = fork();
+    pid = fork(TICKETS_DEFAULT);
     if(pid < 0)
       break;
     if(pid == 0)
diff --git a/init.c b/init.c
index 046b551..35df6a8 100644
--- a/init.c
+++ b/init.c
@@ -4,6 +4,7 @@
 #include "stat.h"
 #include "user.h"
 #include "fcntl.h"
+#include "param.h"
 
 char *argv[] = { "sh", 0 };
 
@@ -21,7 +22,7 @@ main(void)
 
   for(;;){
     printf(1, "init: starting sh\n");
-    pid = fork();
+    pid = fork(TICKETS_DEFAULT);
     if(pid < 0){
       printf(1, "init: fork failed\n");
       exit();
diff --git a/param.h b/param.h
index a7e90ef..c20ee19 100644
--- a/param.h
+++ b/param.h
@@ -11,4 +11,6 @@
 #define LOGSIZE      (MAXOPBLOCKS*3)  // max data blocks in on-disk log
 #define NBUF         (MAXOPBLOCKS*3)  // size of disk block cache
 #define FSSIZE       1000  // size of file system in blocks
-
+#define TICKETS_DEFAULT 10 // default amount of tickets to forks
+#define TICKETS_MAX 200 // Max amount of tickets to forks
+#define TICKETS_MIN 1 // Min amount of tickets to forks
diff --git a/proc.c b/proc.c
index 806b1b1..120a0ac 100644
--- a/proc.c
+++ b/proc.c
@@ -6,6 +6,8 @@
 #include "x86.h"
 #include "proc.h"
 #include "spinlock.h"
+#include "rand.h"
+#include <stdio.h>
 
 struct {
   struct spinlock lock;
@@ -88,6 +90,7 @@ allocproc(void)
 found:
   p->state = EMBRYO;
   p->pid = nextpid++;
+  p->calls = 0;
 
   release(&ptable.lock);
 
@@ -178,7 +181,7 @@ growproc(int n)
 // Sets up stack to return as if from system call.
 // Caller must set state of returned proc to RUNNABLE.
 int
-fork(void)
+fork(int tickets)
 {
   int i, pid;
   struct proc *np;
@@ -189,6 +192,14 @@ fork(void)
     return -1;
   }
 
+  if (tickets > TICKETS_MAX) {
+    np->tickets = TICKETS_MAX;
+  } else if (tickets < TICKETS_MIN) {
+    np->tickets = TICKETS_MIN;
+  } else {
+    np->tickets = tickets;
+  }
+
   // Copy process state from proc.
   if((np->pgdir = copyuvm(curproc->pgdir, curproc->sz)) == 0){
     kfree(np->kstack);
@@ -311,6 +322,20 @@ wait(void)
   }
 }
 
+int
+lottery_total (void)
+{
+  struct proc *p;
+  int ticket_count=0;
+
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+    if(p->state == RUNNABLE){
+      ticket_count += p->tickets;
+    }
+  }
+  return ticket_count;
+}
+
 //PAGEBREAK: 42
 // Per-CPU process scheduler.
 // Each CPU calls scheduler() after setting itself up.
@@ -325,6 +350,7 @@ scheduler(void)
   struct proc *p;
   struct cpu *c = mycpu();
   c->proc = 0;
+  int count, selected_ticket, total_tickets;
   
   for(;;){
     // Enable interrupts on this processor.
@@ -332,10 +358,21 @@ scheduler(void)
 
     // Loop over process table looking for process to run.
     acquire(&ptable.lock);
+
+    count = 0;
+    total_tickets = lottery_total();
+    selected_ticket = random_at_most(total_tickets);
+
     for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
       if(p->state != RUNNABLE)
         continue;
 
+      if ((count + p->tickets) < selected_ticket) {
+        count += p->tickets;
+        continue;
+      }
+
+      p->calls++;
       // Switch to chosen process.  It is the process's job
       // to release ptable.lock and then reacquire it
       // before jumping back to us.
@@ -349,6 +386,7 @@ scheduler(void)
       // Process is done running for now.
       // It should have changed its p->state before coming back.
       c->proc = 0;
+      break;
     }
     release(&ptable.lock);
 
@@ -523,7 +561,7 @@ procdump(void)
       state = states[p->state];
     else
       state = "???";
-    cprintf("%d %s %s", p->pid, state, p->name);
+    cprintf("PID=%d STATE=%s NAME=%s TICKETS=%d CALLS=%d", p->pid, state, p->name, p->tickets, p->calls);
     if(p->state == SLEEPING){
       getcallerpcs((uint*)p->context->ebp+2, pc);
       for(i=0; i<10 && pc[i] != 0; i++)
diff --git a/proc.h b/proc.h
index 1647114..f97dd13 100644
--- a/proc.h
+++ b/proc.h
@@ -49,6 +49,8 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+  int calls;                   // The amount of times the process was called 
+  int tickets;                 // The amount of tickets for the scheduler
 };
 
 // Process memory is laid out contiguously, low addresses first:
diff --git a/rand.c b/rand.c
new file mode 100644
index 0000000..1e148b2
--- /dev/null
+++ b/rand.c
@@ -0,0 +1,121 @@
+/* A C-program for MT19937: Real number version                */
+/*   genrand() generates one pseudorandom real number (double) */
+/* which is uniformly distributed on [0,1]-interval, for each  */
+/* call. sgenrand(seed) set initial values to the working area */
+/* of 624 words. Before genrand(), sgenrand(seed) must be      */
+/* called once. (seed is any 32-bit integer except for 0).     */
+/* Integer generator is obtained by modifying two lines.       */
+/*   Coded by Takuji Nishimura, considering the suggestions by */
+/* Topher Cooper and Marc Rieffel in July-Aug. 1997.           */
+
+/* This library is free software; you can redistribute it and/or   */
+/* modify it under the terms of the GNU Library General Public     */
+/* License as published by the Free Software Foundation; either    */
+/* version 2 of the License, or (at your option) any later         */
+/* version.                                                        */
+/* This library is distributed in the hope that it will be useful, */
+/* but WITHOUT ANY WARRANTY; without even the implied warranty of  */
+/* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.            */
+/* See the GNU Library General Public License for more details.    */
+/* You should have received a copy of the GNU Library General      */
+/* Public License along with this library; if not, write to the    */
+/* Free Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA   */ 
+/* 02111-1307  USA                                                 */
+
+/* Copyright (C) 1997 Makoto Matsumoto and Takuji Nishimura.       */
+/* Any feedback is very welcome. For any question, comments,       */
+/* see http://www.math.keio.ac.jp/matumoto/emt.html or email       */
+/* matumoto@math.keio.ac.jp                                        */
+
+/* Period parameters */  
+#define N 624
+#define M 397
+#define MATRIX_A 0x9908b0df   /* constant vector a */
+#define UPPER_MASK 0x80000000 /* most significant w-r bits */
+#define LOWER_MASK 0x7fffffff /* least significant r bits */
+
+/* Tempering parameters */   
+#define TEMPERING_MASK_B 0x9d2c5680
+#define TEMPERING_MASK_C 0xefc60000
+#define TEMPERING_SHIFT_U(y)  (y >> 11)
+#define TEMPERING_SHIFT_S(y)  (y << 7)
+#define TEMPERING_SHIFT_T(y)  (y << 15)
+#define TEMPERING_SHIFT_L(y)  (y >> 18)
+
+#define RAND_MAX 0x7fffffff
+
+static unsigned long mt[N]; /* the array for the state vector  */
+static int mti=N+1; /* mti==N+1 means mt[N] is not initialized */
+
+/* initializing the array with a NONZERO seed */
+void
+sgenrand(unsigned long seed)
+{
+    /* setting initial seeds to mt[N] using         */
+    /* the generator Line 25 of Table 1 in          */
+    /* [KNUTH 1981, The Art of Computer Programming */
+    /*    Vol. 2 (2nd Ed.), pp102]                  */
+    mt[0]= seed & 0xffffffff;
+    for (mti=1; mti<N; mti++)
+        mt[mti] = (69069 * mt[mti-1]) & 0xffffffff;
+}
+
+long /* for integer generation */
+genrand()
+{
+    unsigned long y;
+    static unsigned long mag01[2]={0x0, MATRIX_A};
+    /* mag01[x] = x * MATRIX_A  for x=0,1 */
+
+    if (mti >= N) { /* generate N words at one time */
+        int kk;
+
+        if (mti == N+1)   /* if sgenrand() has not been called, */
+            sgenrand(4357); /* a default initial seed is used   */
+
+        for (kk=0;kk<N-M;kk++) {
+            y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
+            mt[kk] = mt[kk+M] ^ (y >> 1) ^ mag01[y & 0x1];
+        }
+        for (;kk<N-1;kk++) {
+            y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
+            mt[kk] = mt[kk+(M-N)] ^ (y >> 1) ^ mag01[y & 0x1];
+        }
+        y = (mt[N-1]&UPPER_MASK)|(mt[0]&LOWER_MASK);
+        mt[N-1] = mt[M-1] ^ (y >> 1) ^ mag01[y & 0x1];
+
+        mti = 0;
+    }
+  
+    y = mt[mti++];
+    y ^= TEMPERING_SHIFT_U(y);
+    y ^= TEMPERING_SHIFT_S(y) & TEMPERING_MASK_B;
+    y ^= TEMPERING_SHIFT_T(y) & TEMPERING_MASK_C;
+    y ^= TEMPERING_SHIFT_L(y);
+
+    // Strip off uppermost bit because we want a long,
+    // not an unsigned long
+    return y & RAND_MAX;
+}
+
+// Assumes 0 <= max <= RAND_MAX
+// Returns in the half-open interval [0, max]
+long random_at_most(long max) {
+  unsigned long
+    // max <= RAND_MAX < ULONG_MAX, so this is okay.
+    num_bins = (unsigned long) max + 1,
+    num_rand = (unsigned long) RAND_MAX + 1,
+    bin_size = num_rand / num_bins,
+    defect   = num_rand % num_bins;
+
+  long x;
+  do {
+   x = genrand();
+  }
+  // This is carefully written not to overflow
+  while (num_rand - defect <= (unsigned long)x);
+
+  // Truncated division is intentional
+  return x/bin_size;
+}
+
diff --git a/rand.h b/rand.h
new file mode 100644
index 0000000..01affcb
--- /dev/null
+++ b/rand.h
@@ -0,0 +1,3 @@
+void sgenrand(unsigned long);
+long genrand(void);
+long random_at_most(long);
diff --git a/schedulingtest.c b/schedulingtest.c
new file mode 100644
index 0000000..df2d621
--- /dev/null
+++ b/schedulingtest.c
@@ -0,0 +1,57 @@
+// Test that fork fails gracefully.
+// Tiny executable so that the limit can be filling the proc table.
+
+#include "types.h"
+#include "user.h"
+
+#define SEARCH_NTH_PRIME 10000
+
+// Worst possible implementation to find a prime
+int is_prime(int number) {
+  int i;
+  for (i = 2; i * i <= number; i++) {
+    if (number % i == 0)
+      return 0;
+  }
+  return 1;
+}
+
+int nth_prime(int n) {
+  int counter = 0;
+  int i;
+  if (n == 1)
+    return 2;
+  for (i = 3;; i += 2) {
+    if (is_prime(i)) {
+      counter++;
+      if (counter == (n - 1)) {
+        printf(1, "", i); // Anti optimization
+        return i;
+      }
+    }
+  }
+}
+
+void testscheduling(void) {
+  int pid;
+
+  printf(1, "schedulingtest - the next lines should be displayed in order\n");
+  int tickets[] = { 40, 20, 10 };
+  int tickets_amount = sizeof(tickets)/sizeof(tickets[0]);
+
+  for (int i = 0; i < tickets_amount; i++) {
+    pid = fork(tickets[i]);
+    if (pid == 0) {
+      nth_prime(SEARCH_NTH_PRIME);
+      printf(1, "%d - proccess finished.\n", i+1);
+      exit();
+    }
+    wait();
+  }
+}
+
+int main(void) {
+  testscheduling();
+  wait();
+  exit();
+}
diff --git a/sh.c b/sh.c
index 054bab9..2592baf 100644
--- a/sh.c
+++ b/sh.c
@@ -3,6 +3,7 @@
 #include "types.h"
 #include "user.h"
 #include "fcntl.h"
+#include "param.h"
 
 // Parsed command representation
 #define EXEC  1
@@ -49,7 +50,7 @@ struct backcmd {
   struct cmd *cmd;
 };
 
-int fork1(void);  // Fork but panics on failure.
+int fork1(int);  // Fork but panics on failure.
 void panic(char*);
 struct cmd *parsecmd(char*);
 
@@ -91,7 +92,7 @@ runcmd(struct cmd *cmd)
 
   case LIST:
     lcmd = (struct listcmd*)cmd;
-    if(fork1() == 0)
+    if(fork1(TICKETS_DEFAULT) == 0)
       runcmd(lcmd->left);
     wait();
     runcmd(lcmd->right);
@@ -101,14 +102,14 @@ runcmd(struct cmd *cmd)
     pcmd = (struct pipecmd*)cmd;
     if(pipe(p) < 0)
       panic("pipe");
-    if(fork1() == 0){
+    if(fork1(TICKETS_DEFAULT) == 0){
       close(1);
       dup(p[1]);
       close(p[0]);
       close(p[1]);
       runcmd(pcmd->left);
     }
-    if(fork1() == 0){
+    if(fork1(TICKETS_DEFAULT) == 0){
       close(0);
       dup(p[0]);
       close(p[0]);
@@ -123,7 +124,7 @@ runcmd(struct cmd *cmd)
 
   case BACK:
     bcmd = (struct backcmd*)cmd;
-    if(fork1() == 0)
+    if(fork1(TICKETS_DEFAULT) == 0)
       runcmd(bcmd->cmd);
     break;
   }
@@ -164,7 +165,7 @@ main(void)
         printf(2, "cannot cd %s\n", buf+3);
       continue;
     }
-    if(fork1() == 0)
+    if(fork1(TICKETS_DEFAULT) == 0)
       runcmd(parsecmd(buf));
     wait();
   }
@@ -179,11 +180,11 @@ panic(char *s)
 }
 
 int
-fork1(void)
+fork1(int tickets)
 {
   int pid;
 
-  pid = fork();
+  pid = fork(tickets);
   if(pid == -1)
     panic("fork");
   return pid;
diff --git a/stressfs.c b/stressfs.c
index c0a4743..18c32f1 100644
--- a/stressfs.c
+++ b/stressfs.c
@@ -12,6 +12,7 @@
 #include "user.h"
 #include "fs.h"
 #include "fcntl.h"
+#include "param.h"
 
 int
 main(int argc, char *argv[])
@@ -24,7 +25,7 @@ main(int argc, char *argv[])
   memset(data, 'a', sizeof(data));
 
   for(i = 0; i < 4; i++)
-    if(fork() > 0)
+    if(fork(TICKETS_DEFAULT) > 0)
       break;
 
   printf(1, "write %d\n", i);
diff --git a/sysproc.c b/sysproc.c
index 0686d29..0d989df 100644
--- a/sysproc.c
+++ b/sysproc.c
@@ -10,7 +10,10 @@
 int
 sys_fork(void)
 {
-  return fork();
+  int tickets;
+  if(argint(0, &tickets))
+    return -1;
+  return fork(tickets);
 }
 
 int
diff --git a/user.h b/user.h
index 4f99c52..3ba3739 100644
--- a/user.h
+++ b/user.h
@@ -2,7 +2,7 @@ struct stat;
 struct rtcdate;
 
 // system calls
-int fork(void);
+int fork(int);
 int exit(void) __attribute__((noreturn));
 int wait(void);
 int pipe(int*);
diff --git a/usertests.c b/usertests.c
index a1e97e7..9446f7a 100644
--- a/usertests.c
+++ b/usertests.c
@@ -46,7 +46,7 @@ exitiputtest(void)
 
   printf(stdout, "exitiput test\n");
 
-  pid = fork();
+  pid = fork(TICKETS_DEFAULT);
   if(pid < 0){
     printf(stdout, "fork failed\n");
     exit();
@@ -91,7 +91,7 @@ openiputtest(void)
     printf(stdout, "mkdir oidir failed\n");
     exit();
   }
-  pid = fork();
+  pid = fork(TICKETS_DEFAULT);
   if(pid < 0){
     printf(stdout, "fork failed\n");
     exit();
@@ -312,7 +312,7 @@ pipe1(void)
     printf(1, "pipe() failed\n");
     exit();
   }
-  pid = fork();
+  pid = fork(TICKETS_DEFAULT);
   seq = 0;
   if(pid == 0){
     close(fds[0]);
@@ -348,7 +348,7 @@ pipe1(void)
     close(fds[0]);
     wait();
   } else {
-    printf(1, "fork() failed\n");
+    printf(1, "fork(TICKETS_DEFAULT) failed\n");
     exit();
   }
   printf(1, "pipe1 ok\n");
@@ -362,18 +362,18 @@ preempt(void)
   int pfds[2];
 
   printf(1, "preempt: ");
-  pid1 = fork();
+  pid1 = fork(TICKETS_DEFAULT);
   if(pid1 == 0)
     for(;;)
       ;
 
-  pid2 = fork();
+  pid2 = fork(TICKETS_DEFAULT);
   if(pid2 == 0)
     for(;;)
       ;
 
   pipe(pfds);
-  pid3 = fork();
+  pid3 = fork(TICKETS_DEFAULT);
   if(pid3 == 0){
     close(pfds[0]);
     if(write(pfds[1], "x", 1) != 1)
@@ -407,7 +407,7 @@ exitwait(void)
   int i, pid;
 
   for(i = 0; i < 100; i++){
-    pid = fork();
+    pid = fork(TICKETS_DEFAULT);
     if(pid < 0){
       printf(1, "fork failed\n");
       return;
@@ -432,7 +432,7 @@ mem(void)
 
   printf(1, "mem test\n");
   ppid = getpid();
-  if((pid = fork()) == 0){
+  if((pid = fork(TICKETS_DEFAULT)) == 0){
     m1 = 0;
     while((m2 = malloc(10001)) != 0){
       *(char**)m2 = m1;
@@ -475,7 +475,7 @@ sharedfd(void)
     printf(1, "fstests: cannot open sharedfd for writing");
     return;
   }
-  pid = fork();
+  pid = fork(TICKETS_DEFAULT);
   memset(buf, pid==0?'c':'p', sizeof(buf));
   for(i = 0; i < 1000; i++){
     if(write(fd, buf, sizeof(buf)) != sizeof(buf)){
@@ -527,7 +527,7 @@ fourfiles(void)
     fname = names[pi];
     unlink(fname);
 
-    pid = fork();
+    pid = fork(TICKETS_DEFAULT);
     if(pid < 0){
       printf(1, "fork failed\n");
       exit();
@@ -590,7 +590,7 @@ createdelete(void)
   printf(1, "createdelete test\n");
 
   for(pi = 0; pi < 4; pi++){
-    pid = fork();
+    pid = fork(TICKETS_DEFAULT);
     if(pid < 0){
       printf(1, "fork failed\n");
       exit();
@@ -778,7 +778,7 @@ concreate(void)
   for(i = 0; i < 40; i++){
     file[1] = '0' + i;
     unlink(file);
-    pid = fork();
+    pid = fork(TICKETS_DEFAULT);
     if(pid && (i % 3) == 1){
       link("C0", file);
     } else if(pid == 0 && (i % 5) == 1){
@@ -826,7 +826,7 @@ concreate(void)
 
   for(i = 0; i < 40; i++){
     file[1] = '0' + i;
-    pid = fork();
+    pid = fork(TICKETS_DEFAULT);
     if(pid < 0){
       printf(1, "fork failed\n");
       exit();
@@ -862,7 +862,7 @@ linkunlink()
   printf(1, "linkunlink test\n");
 
   unlink("x");
-  pid = fork();
+  pid = fork(TICKETS_DEFAULT);
   if(pid < 0){
     printf(1, "fork failed\n");
     exit();
@@ -1384,7 +1384,7 @@ forktest(void)
   printf(1, "fork test\n");
 
   for(n=0; n<1000; n++){
-    pid = fork();
+    pid = fork(TICKETS_DEFAULT);
     if(pid < 0)
       break;
     if(pid == 0)
@@ -1433,7 +1433,7 @@ sbrktest(void)
     *b = 1;
     a = b + 1;
   }
-  pid = fork();
+  pid = fork(TICKETS_DEFAULT);
   if(pid < 0){
     printf(stdout, "sbrk test fork failed\n");
     exit();
@@ -1496,7 +1496,7 @@ sbrktest(void)
   // can we read the kernel's memory?
   for(a = (char*)(KERNBASE); a < (char*) (KERNBASE+2000000); a += 50000){
     ppid = getpid();
-    pid = fork();
+    pid = fork(TICKETS_DEFAULT);
     if(pid < 0){
       printf(stdout, "fork failed\n");
       exit();
@@ -1516,7 +1516,7 @@ sbrktest(void)
     exit();
   }
   for(i = 0; i < sizeof(pids)/sizeof(pids[0]); i++){
-    if((pids[i] = fork()) == 0){
+    if((pids[i] = fork(TICKETS_DEFAULT)) == 0){
       // allocate a lot of memory
       sbrk(BIG - (uint)sbrk(0));
       write(fds[1], "x", 1);
@@ -1569,7 +1569,7 @@ validatetest(void)
   hi = 1100*1024;
 
   for(p = 0; p <= (uint)hi; p += 4096){
-    if((pid = fork()) == 0){
+    if((pid = fork(TICKETS_DEFAULT)) == 0){
       // try to crash the kernel by passing in a badly placed integer
       validateint((int*)p);
       exit();
@@ -1615,7 +1615,7 @@ bigargtest(void)
   int pid, fd;
 
   unlink("bigarg-ok");
-  pid = fork();
+  pid = fork(TICKETS_DEFAULT);
   if(pid == 0){
     static char *args[MAXARG];
     int i;
@@ -1706,7 +1706,7 @@ uio()
   int pid;
 
   printf(1, "uio test\n");
-  pid = fork();
+  pid = fork(TICKETS_DEFAULT);
   if(pid == 0){
     port = RTC_ADDR;
     val = 0x09;  /* year */
diff --git a/zombie.c b/zombie.c
index ee817da..4af5c6f 100644
--- a/zombie.c
+++ b/zombie.c
@@ -4,11 +4,12 @@
 #include "types.h"
 #include "stat.h"
 #include "user.h"
+#include "param.h"
 
 int
 main(void)
 {
-  if(fork() > 0)
+  if(fork(TICKETS_DEFAULT) > 0)
     sleep(5);  // Let child exit before parent.
   exit();
 }
