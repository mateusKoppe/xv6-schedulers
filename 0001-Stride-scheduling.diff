diff --git a/Makefile b/Makefile
index 09d790c..30e114a 100644
--- a/Makefile
+++ b/Makefile
@@ -181,6 +181,7 @@ UPROGS=\
 	_usertests\
 	_wc\
 	_zombie\
+	_schedulingtest\
 
 fs.img: mkfs README $(UPROGS)
 	./mkfs fs.img README $(UPROGS)
@@ -248,7 +249,7 @@ qemu-nox-gdb: fs.img xv6.img .gdbinit
 # check in that version.
 
 EXTRA=\
-	mkfs.c ulib.c user.h cat.c echo.c forktest.c grep.c kill.c\
+	mkfs.c ulib.c user.h cat.c echo.c forktest.c schedulingtest. grep.c kill.c\
 	ln.c ls.c mkdir.c rm.c stressfs.c usertests.c wc.c zombie.c\
 	printf.c umalloc.c\
 	README dot-bochsrc *.pl toc.* runoff runoff1 runoff.list\
diff --git a/defs.h b/defs.h
index 82fb982..611a6d1 100644
--- a/defs.h
+++ b/defs.h
@@ -105,7 +105,7 @@ int             pipewrite(struct pipe*, char*, int);
 // proc.c
 int             cpuid(void);
 void            exit(void);
-int             fork(void);
+int             fork(int);
 int             growproc(int);
 int             kill(int);
 struct cpu*     mycpu(void);
diff --git a/forktest.c b/forktest.c
index 8bc984d..7818e40 100644
--- a/forktest.c
+++ b/forktest.c
@@ -4,6 +4,7 @@
 #include "types.h"
 #include "stat.h"
 #include "user.h"
+#include "param.h"
 
 #define N  1000
 
@@ -21,7 +22,7 @@ forktest(void)
   printf(1, "fork test\n");
 
   for(n=0; n<N; n++){
-    pid = fork();
+    pid = fork(TICKETS_DEFAULT);
     if(pid < 0)
       break;
     if(pid == 0)
diff --git a/init.c b/init.c
index 046b551..cda0204 100644
--- a/init.c
+++ b/init.c
@@ -2,6 +2,7 @@
 
 #include "types.h"
 #include "stat.h"
+#include "param.h"
 #include "user.h"
 #include "fcntl.h"
 
@@ -21,7 +22,7 @@ main(void)
 
   for(;;){
     printf(1, "init: starting sh\n");
-    pid = fork();
+    pid = fork(TICKETS_DEFAULT);
     if(pid < 0){
       printf(1, "init: fork failed\n");
       exit();
diff --git a/param.h b/param.h
index a7e90ef..1607f97 100644
--- a/param.h
+++ b/param.h
@@ -11,4 +11,9 @@
 #define LOGSIZE      (MAXOPBLOCKS*3)  // max data blocks in on-disk log
 #define NBUF         (MAXOPBLOCKS*3)  // size of disk block cache
 #define FSSIZE       1000  // size of file system in blocks
-
+#define STRIDE_CONST 10000 // constant for strides
+#define INT_MAX      2147483647
+#define STRIDE_INT_MAX (INT_MAX - (STRIDE_CONST * 2))
+#define TICKETS_DEFAULT 10
+#define STRIDE_MAX_TICKET 1000000
+#define STRIDE_MIN_TICKET 1
diff --git a/proc.c b/proc.c
index 806b1b1..8be7e36 100644
--- a/proc.c
+++ b/proc.c
@@ -88,6 +88,7 @@ allocproc(void)
 found:
   p->state = EMBRYO;
   p->pid = nextpid++;
+  p->calls = 0;
 
   release(&ptable.lock);
 
@@ -178,7 +179,7 @@ growproc(int n)
 // Sets up stack to return as if from system call.
 // Caller must set state of returned proc to RUNNABLE.
 int
-fork(void)
+fork(int tickets)
 {
   int i, pid;
   struct proc *np;
@@ -189,6 +190,17 @@ fork(void)
     return -1;
   }
 
+  if (tickets > STRIDE_MAX_TICKET) {
+    np->tickets = STRIDE_MAX_TICKET;
+  } else if (tickets < STRIDE_MIN_TICKET) {
+    np->tickets = STRIDE_MIN_TICKET;
+  } else {
+    np->tickets = tickets;
+  }
+
+  np->stride = (int)(STRIDE_CONST/np->tickets);
+  np->pass = 0;
+
   // Copy process state from proc.
   if((np->pgdir = copyuvm(curproc->pgdir, curproc->sz)) == 0){
     kfree(np->kstack);
@@ -311,6 +323,37 @@ wait(void)
   }
 }
 
+// Reset pass of procs to stride
+void overflow_stride(){
+  struct proc *p;
+
+  for (p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+    p->pass = p->stride;
+  }
+}
+
+// Find the smallest pass PID
+int find_smallest_pass_pid(){
+  struct proc *p;
+  int pid = 0;
+  int smallest = INT_MAX;
+
+  for (p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+    if (p->state != RUNNABLE) continue;
+
+    if (p->pass < smallest){
+      smallest = p->pass;
+      pid = p->pid;
+    }
+
+    if (p->pid == 0) break;
+  }
+
+  return pid;
+}
+
+
+
 //PAGEBREAK: 42
 // Per-CPU process scheduler.
 // Each CPU calls scheduler() after setting itself up.
@@ -332,10 +375,23 @@ scheduler(void)
 
     // Loop over process table looking for process to run.
     acquire(&ptable.lock);
+
+    int next_pid = find_smallest_pass_pid();
+
     for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
       if(p->state != RUNNABLE)
         continue;
 
+      if (p->pid != next_pid) continue;
+      p->calls++;
+
+      if (p->pass >= STRIDE_INT_MAX) overflow_stride();
+      if (p->pass < 0) overflow_stride();
+
+
+      p->pass += p->stride;
+
+
       // Switch to chosen process.  It is the process's job
       // to release ptable.lock and then reacquire it
       // before jumping back to us.
@@ -523,7 +579,7 @@ procdump(void)
       state = states[p->state];
     else
       state = "???";
-    cprintf("%d %s %s", p->pid, state, p->name);
+    cprintf("PID=%d STATE=%s NAME=%s TICKETS=%d STRIDE=%d PASS=%d CALLS=%d", p->pid, state, p->name, p->tickets, p->stride, p->pass, p->calls);
     if(p->state == SLEEPING){
       getcallerpcs((uint*)p->context->ebp+2, pc);
       for(i=0; i<10 && pc[i] != 0; i++)
diff --git a/proc.h b/proc.h
index 1647114..21c467f 100644
--- a/proc.h
+++ b/proc.h
@@ -49,6 +49,10 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+  int tickets;                 // Amount of tickets used to calc the stride;
+  int stride;                  // Size of the stride used to sum the pass;
+  int pass;                    // Amount of stride run
+  int calls;                   // Amount of calls a proc received
 };
 
 // Process memory is laid out contiguously, low addresses first:
diff --git a/schedulingtest.c b/schedulingtest.c
new file mode 100644
index 0000000..d8d15af
--- /dev/null
+++ b/schedulingtest.c
@@ -0,0 +1,55 @@
+// Test that fork fails gracefully.
+// Tiny executable so that the limit can be filling the proc table.
+
+#include "types.h"
+#include "user.h"
+
+#define SEARCH_NTH_PRIME 250000
+
+// Worst possible implementation to find a prime
+int is_prime(int number) {
+  int i;
+  for (i = 2; i * i <= number; i++) {
+    if (number % i == 0)
+      return 0;
+  }
+  return 1;
+}
+
+int nth_prime(int n) {
+  int counter = 0;
+  int i;
+  if (n == 1)
+    return 2;
+  for (i = 3;; i += 2) {
+    if (is_prime(i)) {
+      counter++;
+      if (counter == (n - 1)) {
+        printf(1, "", i); // Anti optimization
+        return i;
+      }
+    }
+  }
+}
+
+void testscheduling(void) {
+  int pid;
+
+  printf(1, "schedulingtest - the next lines should be displayed in order\n");
+  int tickets[] = { 40, 20, 10 };
+  int tickets_amount = sizeof(tickets)/sizeof(tickets[0]);
+
+  for (int i = 0; i < tickets_amount; i++) {
+    pid = fork(tickets[i]);
+    if (pid == 0) {
+      nth_prime(SEARCH_NTH_PRIME);
+      printf(1, "%d - proccess finished.\n", i+1);
+      exit();
+    }
+  }
+}
+
+int main(void) {
+  testscheduling();
+  exit();
+}
diff --git a/sh.c b/sh.c
index 054bab9..2592baf 100644
--- a/sh.c
+++ b/sh.c
@@ -3,6 +3,7 @@
 #include "types.h"
 #include "user.h"
 #include "fcntl.h"
+#include "param.h"
 
 // Parsed command representation
 #define EXEC  1
@@ -49,7 +50,7 @@ struct backcmd {
   struct cmd *cmd;
 };
 
-int fork1(void);  // Fork but panics on failure.
+int fork1(int);  // Fork but panics on failure.
 void panic(char*);
 struct cmd *parsecmd(char*);
 
@@ -91,7 +92,7 @@ runcmd(struct cmd *cmd)
 
   case LIST:
     lcmd = (struct listcmd*)cmd;
-    if(fork1() == 0)
+    if(fork1(TICKETS_DEFAULT) == 0)
       runcmd(lcmd->left);
     wait();
     runcmd(lcmd->right);
@@ -101,14 +102,14 @@ runcmd(struct cmd *cmd)
     pcmd = (struct pipecmd*)cmd;
     if(pipe(p) < 0)
       panic("pipe");
-    if(fork1() == 0){
+    if(fork1(TICKETS_DEFAULT) == 0){
       close(1);
       dup(p[1]);
       close(p[0]);
       close(p[1]);
       runcmd(pcmd->left);
     }
-    if(fork1() == 0){
+    if(fork1(TICKETS_DEFAULT) == 0){
       close(0);
       dup(p[0]);
       close(p[0]);
@@ -123,7 +124,7 @@ runcmd(struct cmd *cmd)
 
   case BACK:
     bcmd = (struct backcmd*)cmd;
-    if(fork1() == 0)
+    if(fork1(TICKETS_DEFAULT) == 0)
       runcmd(bcmd->cmd);
     break;
   }
@@ -164,7 +165,7 @@ main(void)
         printf(2, "cannot cd %s\n", buf+3);
       continue;
     }
-    if(fork1() == 0)
+    if(fork1(TICKETS_DEFAULT) == 0)
       runcmd(parsecmd(buf));
     wait();
   }
@@ -179,11 +180,11 @@ panic(char *s)
 }
 
 int
-fork1(void)
+fork1(int tickets)
 {
   int pid;
 
-  pid = fork();
+  pid = fork(tickets);
   if(pid == -1)
     panic("fork");
   return pid;
diff --git a/stressfs.c b/stressfs.c
index c0a4743..18c32f1 100644
--- a/stressfs.c
+++ b/stressfs.c
@@ -12,6 +12,7 @@
 #include "user.h"
 #include "fs.h"
 #include "fcntl.h"
+#include "param.h"
 
 int
 main(int argc, char *argv[])
@@ -24,7 +25,7 @@ main(int argc, char *argv[])
   memset(data, 'a', sizeof(data));
 
   for(i = 0; i < 4; i++)
-    if(fork() > 0)
+    if(fork(TICKETS_DEFAULT) > 0)
       break;
 
   printf(1, "write %d\n", i);
diff --git a/sysproc.c b/sysproc.c
index 0686d29..0d989df 100644
--- a/sysproc.c
+++ b/sysproc.c
@@ -10,7 +10,10 @@
 int
 sys_fork(void)
 {
-  return fork();
+  int tickets;
+  if(argint(0, &tickets))
+    return -1;
+  return fork(tickets);
 }
 
 int
diff --git a/user.h b/user.h
index 4f99c52..3ba3739 100644
--- a/user.h
+++ b/user.h
@@ -2,7 +2,7 @@ struct stat;
 struct rtcdate;
 
 // system calls
-int fork(void);
+int fork(int);
 int exit(void) __attribute__((noreturn));
 int wait(void);
 int pipe(int*);
diff --git a/usertests.c b/usertests.c
index a1e97e7..9446f7a 100644
--- a/usertests.c
+++ b/usertests.c
@@ -46,7 +46,7 @@ exitiputtest(void)
 
   printf(stdout, "exitiput test\n");
 
-  pid = fork();
+  pid = fork(TICKETS_DEFAULT);
   if(pid < 0){
     printf(stdout, "fork failed\n");
     exit();
@@ -91,7 +91,7 @@ openiputtest(void)
     printf(stdout, "mkdir oidir failed\n");
     exit();
   }
-  pid = fork();
+  pid = fork(TICKETS_DEFAULT);
   if(pid < 0){
     printf(stdout, "fork failed\n");
     exit();
@@ -312,7 +312,7 @@ pipe1(void)
     printf(1, "pipe() failed\n");
     exit();
   }
-  pid = fork();
+  pid = fork(TICKETS_DEFAULT);
   seq = 0;
   if(pid == 0){
     close(fds[0]);
@@ -348,7 +348,7 @@ pipe1(void)
     close(fds[0]);
     wait();
   } else {
-    printf(1, "fork() failed\n");
+    printf(1, "fork(TICKETS_DEFAULT) failed\n");
     exit();
   }
   printf(1, "pipe1 ok\n");
@@ -362,18 +362,18 @@ preempt(void)
   int pfds[2];
 
   printf(1, "preempt: ");
-  pid1 = fork();
+  pid1 = fork(TICKETS_DEFAULT);
   if(pid1 == 0)
     for(;;)
       ;
 
-  pid2 = fork();
+  pid2 = fork(TICKETS_DEFAULT);
   if(pid2 == 0)
     for(;;)
       ;
 
   pipe(pfds);
-  pid3 = fork();
+  pid3 = fork(TICKETS_DEFAULT);
   if(pid3 == 0){
     close(pfds[0]);
     if(write(pfds[1], "x", 1) != 1)
@@ -407,7 +407,7 @@ exitwait(void)
   int i, pid;
 
   for(i = 0; i < 100; i++){
-    pid = fork();
+    pid = fork(TICKETS_DEFAULT);
     if(pid < 0){
       printf(1, "fork failed\n");
       return;
@@ -432,7 +432,7 @@ mem(void)
 
   printf(1, "mem test\n");
   ppid = getpid();
-  if((pid = fork()) == 0){
+  if((pid = fork(TICKETS_DEFAULT)) == 0){
     m1 = 0;
     while((m2 = malloc(10001)) != 0){
       *(char**)m2 = m1;
@@ -475,7 +475,7 @@ sharedfd(void)
     printf(1, "fstests: cannot open sharedfd for writing");
     return;
   }
-  pid = fork();
+  pid = fork(TICKETS_DEFAULT);
   memset(buf, pid==0?'c':'p', sizeof(buf));
   for(i = 0; i < 1000; i++){
     if(write(fd, buf, sizeof(buf)) != sizeof(buf)){
@@ -527,7 +527,7 @@ fourfiles(void)
     fname = names[pi];
     unlink(fname);
 
-    pid = fork();
+    pid = fork(TICKETS_DEFAULT);
     if(pid < 0){
       printf(1, "fork failed\n");
       exit();
@@ -590,7 +590,7 @@ createdelete(void)
   printf(1, "createdelete test\n");
 
   for(pi = 0; pi < 4; pi++){
-    pid = fork();
+    pid = fork(TICKETS_DEFAULT);
     if(pid < 0){
       printf(1, "fork failed\n");
       exit();
@@ -778,7 +778,7 @@ concreate(void)
   for(i = 0; i < 40; i++){
     file[1] = '0' + i;
     unlink(file);
-    pid = fork();
+    pid = fork(TICKETS_DEFAULT);
     if(pid && (i % 3) == 1){
       link("C0", file);
     } else if(pid == 0 && (i % 5) == 1){
@@ -826,7 +826,7 @@ concreate(void)
 
   for(i = 0; i < 40; i++){
     file[1] = '0' + i;
-    pid = fork();
+    pid = fork(TICKETS_DEFAULT);
     if(pid < 0){
       printf(1, "fork failed\n");
       exit();
@@ -862,7 +862,7 @@ linkunlink()
   printf(1, "linkunlink test\n");
 
   unlink("x");
-  pid = fork();
+  pid = fork(TICKETS_DEFAULT);
   if(pid < 0){
     printf(1, "fork failed\n");
     exit();
@@ -1384,7 +1384,7 @@ forktest(void)
   printf(1, "fork test\n");
 
   for(n=0; n<1000; n++){
-    pid = fork();
+    pid = fork(TICKETS_DEFAULT);
     if(pid < 0)
       break;
     if(pid == 0)
@@ -1433,7 +1433,7 @@ sbrktest(void)
     *b = 1;
     a = b + 1;
   }
-  pid = fork();
+  pid = fork(TICKETS_DEFAULT);
   if(pid < 0){
     printf(stdout, "sbrk test fork failed\n");
     exit();
@@ -1496,7 +1496,7 @@ sbrktest(void)
   // can we read the kernel's memory?
   for(a = (char*)(KERNBASE); a < (char*) (KERNBASE+2000000); a += 50000){
     ppid = getpid();
-    pid = fork();
+    pid = fork(TICKETS_DEFAULT);
     if(pid < 0){
       printf(stdout, "fork failed\n");
       exit();
@@ -1516,7 +1516,7 @@ sbrktest(void)
     exit();
   }
   for(i = 0; i < sizeof(pids)/sizeof(pids[0]); i++){
-    if((pids[i] = fork()) == 0){
+    if((pids[i] = fork(TICKETS_DEFAULT)) == 0){
       // allocate a lot of memory
       sbrk(BIG - (uint)sbrk(0));
       write(fds[1], "x", 1);
@@ -1569,7 +1569,7 @@ validatetest(void)
   hi = 1100*1024;
 
   for(p = 0; p <= (uint)hi; p += 4096){
-    if((pid = fork()) == 0){
+    if((pid = fork(TICKETS_DEFAULT)) == 0){
       // try to crash the kernel by passing in a badly placed integer
       validateint((int*)p);
       exit();
@@ -1615,7 +1615,7 @@ bigargtest(void)
   int pid, fd;
 
   unlink("bigarg-ok");
-  pid = fork();
+  pid = fork(TICKETS_DEFAULT);
   if(pid == 0){
     static char *args[MAXARG];
     int i;
@@ -1706,7 +1706,7 @@ uio()
   int pid;
 
   printf(1, "uio test\n");
-  pid = fork();
+  pid = fork(TICKETS_DEFAULT);
   if(pid == 0){
     port = RTC_ADDR;
     val = 0x09;  /* year */
diff --git a/zombie.c b/zombie.c
index ee817da..4af5c6f 100644
--- a/zombie.c
+++ b/zombie.c
@@ -4,11 +4,12 @@
 #include "types.h"
 #include "stat.h"
 #include "user.h"
+#include "param.h"
 
 int
 main(void)
 {
-  if(fork() > 0)
+  if(fork(TICKETS_DEFAULT) > 0)
     sleep(5);  // Let child exit before parent.
   exit();
 }
